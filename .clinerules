# 重要
あなたはプロのプログラマーです。決められた仕様と指示に従って忠実にプラニング、コーディングをします。
必要最低限のファイルのみ参照し、コンテキストを無駄に増やすことはしません。

# Planモード
## プラニング
- **重要**: プラニングはIssueを作成することが目標。実際にコーディングは行わない。

- タスク内容の精査: 現在のタスク（プラニングモードのブラッシュアップ）の目的、範囲、制約を明確に定義します。
- 要件定義の確認: タスクの要件定義が曖昧な部分がないか確認します。もし曖昧な部分があれば、質問をして明確にします。
- タスクの分割: タスクをより小さく、管理しやすいステップに分割します。各ステップは、明確な目標と成果物を持つようにします。
- mockプランの作成: 各ステップをどのように実行するか、mock（擬似的な）プランを作成します。この段階では、詳細なコードは不要です。
- プランの確認: 分割したステップとmockプランをユーザーに提示し、確認とフィードバックを求めます。
- Issueの作成: ユーザーから許可が得られたら、GitHubのIssueを作成します。Issueには、タスクの目的、範囲、制約、分割されたステップ、mockプランを記述します。

## レビュー
- すべてのPull requestに対して次の動作を行います。
    - Pull requestの取得: Pull requestを取得します。
    - Issueの確認: Pull requestに紐づいたIssueを取得します。
    - コードレビューの作成: Pull requestのコード変更がIssueを解決しているかレビューします。
    - 結果の書き込み: Issueにレビュー結果をコメントします。
    - Merge: Issueを解決していると判断した場合はMergeを行います。
- レビューするPull requestがなくなれば「レビューを終了します。」と述べ、タスクを完了とします。

# Actモード
## コーディング
### Issueが指定されない場合
Issueを通じてコーディングするようにユーザーに提案してください。
無視するように言われた場合はそのまま続行します。

### Issueが指定された場合
Issueを確認し、記載されているプラン通りにコーディングを進めてください。

##### コーディング規約
このプロジェクトでは、以下のコーディング規約に従ってください。

*   **命名規則**:
    *   変数名: キャメルケースを使用します (例: `myVariableName`)。
    *   関数名: キャメルケースを使用します (例: `myFunctionName`)。
    *   クラス名: パスカルケースを使用します (例: `MyClassName`)。
*   **インデント**:
    *   スペース2つを使用します。
*   **コメント**:
    *   コードの意図や処理内容を明確に記述します。
    *   JSDoc形式で記述することを推奨します。

##### テスト戦略
以下のテスト戦略に従って、テストコードを作成してください。

*   **テストの種類**:
    *   ユニットテスト: 個々の関数やクラスの動作を検証します。
    *   結合テスト: 複数の関数やクラスが連携して動作することを検証します。
*   **テストの実行方法**:
    *   Jestなどのテストフレームワークを使用します。
    *   `npm test`コマンドでテストを実行します。

##### リファクタリング
コードの可読性、保守性、パフォーマンスを向上させるために、定期的にリファクタリングを行ってください。

*   **リファクタリングのタイミング**:
    *   コードが複雑になった場合
    *   重複したコードが存在する場合
    *   パフォーマンスが低下した場合
*   **リファクタリングの方法**:
    *   関数やクラスの分割
    *   変数名の変更
    *   コードの整理

##### エラー処理
エラーが発生した場合に備えて、適切なエラー処理を行ってください。

*   **エラー処理の方法**:
    *   try-catch文を使用します。
    *   エラーログを出力します。
*   **エラーメッセージ**:
    *   エラーの内容を明確に記述します。
    *   エラーの発生場所を特定できるようにします。

# ブランチ戦略

## 基本方針

-   GitHub Flow をベースとしたブランチ戦略を採用します。
-   Issue を起点として開発を行い、Pull Request を通じて main ブランチに変更をマージします。
-   Git Actions を活用し、CI/CD パイプラインを構築します。

## ブランチの種類

-   `main`: 常にデプロイ可能な状態を維持するブランチ。
-   `feature/{issue-number}-{description}`: 機能開発用のブランチ。Issue 番号と簡単な説明を含めます。
-   `release/{version}`: リリース準備用のブランチ。バージョン番号を含めます (例: release/1.0.0)。
-   `hotfix/{issue-number}-{description}`: 緊急修正用のブランチ。Issue 番号と簡単な説明を含めます。

## 運用ルール

1.  **Issue の作成**: 新しい機能追加やバグ修正を行う際は、必ず Issue を作成します。
2.  **ブランチの作成**: Issue に基づき、`feature` または `hotfix` ブランチを作成します。
    -   ブランチ名は、`feature/{issue-number}-{description}` または `hotfix/{issue-number}-{description}` の形式とします。
    -   例: `feature/123-add-login-function`
3.  **コミット**:
    -   コミットメッセージには、関連する Issue 番号を含めます (例: `#123 Add login function`)。
    -   可能であれば、コミットは細かく、意味のある単位で行います。
4.  **Pull Request の作成**:
    -   `feature` または `hotfix` ブランチでの作業が完了したら、`main` ブランチへの Pull Request を作成します。
    -   Pull Request のタイトルには、Issue 番号と概要を記述します。
    -   Pull Request の説明には、変更内容の詳細、関連する Issue へのリンク、その他レビュアーへの情報を記述します。
5.  **コードレビュー**:
    -   Pull Request は、少なくとも1人以上のレビュアーによるコードレビューを受けます。
    -   レビュアーは、コードの品質、設計、テスト、セキュリティなどを確認します。
    -   必要に応じて、レビュアーは変更を要求したり、質問をしたりできます。
6.  **マージ**:
    -   コードレビューで承認されたら、Pull Request を `main` ブランチにマージします。
    -   マージコミットには、Pull Request のタイトルと Issue 番号を含めます。
7.  **リリース**:
    -   定期的に、`main` ブランチから `release` ブランチを作成し、リリース準備を行います。
    -   `release` ブランチでは、バージョニング、最終テスト、ドキュメントの更新などを行います。
    -   準備が完了したら、`release` ブランチを `main` ブランチと `v*.*.*` のタグにマージします。
8.  **緊急修正**:
    -   本番環境で重大なバグが見つかった場合は、`main` ブランチから `hotfix` ブランチを作成します。
    -   修正が完了したら、`hotfix` ブランチを `main` ブランチと `release` ブランチ (存在する場合) にマージします。

## CI/CD (Git Actions)

-   Pull Request が作成されたら、自動的にテストが実行されるように設定します。
-   `main` ブランチへのマージ時に、自動的にデプロイが行われるように設定します。

## その他

-   `main` ブランチへの直接コミットは禁止します。
-   長期間放置されたブランチは、整理の対象とします。

# ツール使用法
## GitHub
- `server_name`はGitHubとして実行すること。 **github.com/modelcontextprotocol/servers/tree/main/src/githubは使用してはならない。**
- リポジトリ名はgit remote get-url originを参考に取得すること

# その他
Plan/Actモードにかかわらず、タスクを完了後に自己レビューを行ってください。